server:
  port: 80
  tomcat:
    mbeanregistry:
      enabled: true

spring:
  application:
    name: SPRINGCLOUD-CONSUMER-SEATA-LOADBALANCE-OPENFEIGN-CONFIGURATION-ORDER80 #注意:服务名不要出现_
  devtools:
    restart:
      enabled: true
  logging: #Spring运行日志配置
    level: info
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource            # 当前数据源操作类型
    driver-class-name: com.mysql.cj.jdbc.Driver             # mysql驱动包
    url: jdbc:mysql://192.168.0.2:3306/seata_order
    username: root
    password: 123456

eureka:
  client:
    register-with-eureka: true  #表示是否将自己注册进EurekaServer默认为true。
    fetchRegistry: true  #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡
    service-url:
      #单机版
      defaultZone: http://localhost:7001/eureka
      #集群版
      #defaultZone: http://eureka7002:7002/eureka,http://eureka7003:7003/eureka,http://eureka7004:7004/eureka
  instance:
    instance-id: SPRINGCLOUD-CONSUMER-SEATA-LOADBALANCE-OPENFEIGN-CONFIGURATION-ORDER #Eureka仪表盘中Instances currently registered with Eureka.Status显示的内容
    prefer-ip-address: true  #访问路径可以显示IP地址，点击Eureka仪表盘中Instances currently registered with Eureka.Status显示的内容地址栏是否显示IP地址
    lease-renewal-interval-in-seconds: 30 #Eureka客户端向服务端发送心跳的时间间隔，单位为秒(默认是30秒)
    lease-expiration-duration-in-seconds: 90 #Eureka服务端在收到最后一次心跳后等待时间上限，单位为秒(默认是90秒)，超时将剔除服务

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    restart:
      enabled: true
#对OpenFeign进行单独配置
feign:
  client:
    config:
      default:
        #connectTimeout和readTimeout这两个得一起配置才会生效
        connectTimeout: 5000  #指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间
        readTimeout: 5000   #指的是建立连接后从服务器读取到可用资源所用的时间

ribbon:
  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule  #Ribbon负载均衡规则类所在的路径,自带七种规则,也可以是自定位规则的类所在的路径

logging: #OpenFeign增强日志配置
  level:
    org.openatom.springcloud.services.AccountService: debug  #OpenFeign日志以什么级别监控哪个接口
    org.openatom.springcloud.services.StorageService: debug  #OpenFeign日志以什么级别监控哪个接口
    io:
      seata: info
mybatis:
  mapperLocations: classpath:mapper/*.xml
  type-aliases-package: org.openatom.springcloud.entities    # 所有Entity别名类所在包

app:
  id: springcloud-seata
apollo:
  bootstrap:
    enabled: true
    namespaces: seata-order #多个namespaces之间使用,隔开

#所有服务信息:这是自定义的节点,和seata和项目无关
service:
  seata-server:
    name: seata-server
#所有服务信息:这是自定义的节点,和seata和项目无关
seata:
  enabled: true
  application-id: seata-order
  # 客户端和服务端在同一个事务组
  tx-service-group: my_test_tx_group
  # 事务群组,配置项值为TC集群名,需要与服务端在Eureka中注册时使用的应用名称保持一致
  service:
    vgroup-mapping.my_test_tx_group: ${service.seata-server.name}
  config:
    type: apollo
    apollo:
      seata: default
      cluster: default
      appId: ${app.id}
      apolloMeta: http://localhost:8080
      apolloConfigService: http://localhost:8080
      namespace: ${service.seata-server.name}
  registry:
    type: eureka
    eureka:
      serviceUrl: http://localhost:7001/eureka
      application: ${service.seata-server.name}
      weight: 1