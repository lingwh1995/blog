1.下载工程,并在本地安装所有用到的依赖
2.修改apollo/scripts/flyway/flyway-configdb.properties和apollo/scripts/flyway/flyway-portaldb.properties中的数据库连接信息
    特别注意:如果已经创建好了数据库环境这一步骤可以省略
3.在apollo文件夹下执行如下两个命令；目的是使用flyway脚本自动创建好数据库环境
    特别注意:如果已经创建好了数据库环境这一步骤可以省略
	mvn -N -Pconfigdb flyway:migrate
	mvn -N -Pportaldb flyway:migrate
4.数据库创建好之后在ApolloConfigDB库中执行:将Apollo自带的Eureka的地址换成外部Eureka的地址
	UPDATE apolloconfigdb.ServerConfig SET `Value` = "http://localhost:7001/eureka/" WHERE `key` = "eureka.service.url";
5.改造apollo-configservice
	1>.修改apollo-configservice/src/main/resources/application.yml
		添加下面配置,控制程序 关闭使用@EnableEurekaServer注解,开启使用@EnableEurekaClient注解
		apollo:
		  eureka:
			server:
			  enabled: false
			client:
			  enable: true
	2>.创建启动EurekaClient的配置类: 
		路径:	
			apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/ConfigServerEurekaClientConfigure.java	  
		代码:
			@Configuration
			@EnableEurekaClient
			@ConditionalOnProperty(name = "apollo.eureka.client.enabled", havingValue = "true", matchIfMissing = true)
			public class ConfigServerEurekaClientConfigure {
			}	
	3>.给pom中添加eureka-client相关依赖,注意版本设置为和外部使用的Eureka一致的版本
	    <dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
			<version>2.2.1.RELEASE</version>
			<exclusions>
				<exclusion>
					<groupId>com.sun.jersey</groupId>
					<artifactId>jersey-client</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jersey</groupId>
					<artifactId>jersey-core</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jersey.contribs</groupId>
					<artifactId>jersey-apache-client4</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
6.改造apollo-adminservice
	1>.修改apollo-configservice/src/main/resources/application.yml
		添加下面配置,控制程序 关闭使用@EnableEurekaServer注解,开启使用@EnableEurekaClient注解
		apollo:
		  eureka:
			server:
			  enabled: false
			client:
			  enable: true
	2>.创建启动EurekaClient的配置类: 
		路径:	
			apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/ConfigServerEurekaClientConfigure.java	  
		代码:
			@Configuration
			@EnableEurekaClient
			@ConditionalOnProperty(name = "apollo.eureka.client.enabled", havingValue = "true", matchIfMissing = true)
			public class ConfigServerEurekaClientConfigure {
			}
	3>.给pom中添加eureka-client相关依赖,注意版本设置为和外部使用的Eureka一致的版本
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
			<version>2.2.1.RELEASE</version>
			<exclusions>
				<exclusion>
					<groupId>com.sun.jersey</groupId>
					<artifactId>jersey-client</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jersey</groupId>
					<artifactId>jersey-core</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jersey.contribs</groupId>
					<artifactId>jersey-apache-client4</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
7.执行apollo/scripts/build.bat,执行完成后可以得到下面三个jar包(最好是重命名以下)
	apollo/apollo-adminservice/target/apollo-adminservice-2.0.1-SNAPSHOT.jar -> apollo-adminservice-2.0.1.jar
	apollo/apollo-configservice/target/apollo-configservice-2.0.1-SNAPSHOT.jar	-> apollo-configservice-2.0.1.jar
	apollo/apollo-portal/target/apollo-portal-2.0.1-SNAPSHOT.jar -> apollo-portal-2.0.1.jar
8.创建运行文件夹
	>.创建名称为Apollo2.0.1_eureka_dev的文件夹(版本号以实际为准)
	2>.把三个jar包放入文件夹中
	3>.创建一个logs文件夹,里面存放日志文件,日志文件名称分别是apollo-configservice.log、apollo-adminservice.log、apollo-portal.log
	    注意:不用创建这三个文件,程序运行会自动创建这三个文件
	4>.编写一次启动三个jar的bat脚本

		set url="192.168.0.2:3306"
		set username="root"
		set password="123456"
		set defaultZone="http://localhost:7001/eureka/"

		start "configService" java -Dapollo_profile=github -Deureka.client.serviceUrl.defaultZone=%defaultZone%  -Dspring.datasource.url=jdbc:mysql://%url%/ApolloConfigDB?characterEncoding=utf8 -Dspring.datasource.username=%username% -Dspring.datasource.password=%password% -Dlogging.file.name=.\logs\apollo-configservice.log -jar .\apollo-configservice-2.0.1.jar
		start "adminService" java -Dapollo_profile=github -Deureka.client.serviceUrl.defaultZone=%defaultZone%   -Dspring.datasource.url=jdbc:mysql://%url%/ApolloConfigDB?characterEncoding=utf8 -Dspring.datasource.username=%username% -Dspring.datasource.password=%password% -Dlogging.file.name=.\logs\apollo-adminservice.log -jar .\apollo-adminservice-2.0.1.jar
		start "ApolloPortal" java -Dapollo_profile=github,auth -Ddev_meta=http://localhost:8080/ -Dserver.port=8070 -Dspring.datasource.url=jdbc:mysql://%url%/ApolloPortalDB?characterEncoding=utf8 -Dspring.datasource.username=%username% -Dspring.datasource.password=%password% -Dlogging.file.name=.\logs\apollo-portal.log -jar .\apollo-portal-2.0.1.jar
9.访问地址
	Eureka注册中心: http://localhost:8080/
	Apollo配置中心: http://localhost:8070/
	    登录用户名/密码: apollo/admin