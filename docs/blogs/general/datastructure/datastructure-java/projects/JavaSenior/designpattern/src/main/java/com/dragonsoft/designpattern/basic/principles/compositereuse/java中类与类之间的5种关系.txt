java中类与类之间的5种关系:
    继承/实现(extend/implguan'li'aement):is-a
    依赖:一个类中用到了另一个类
        public class Pen {
            public void write(){
                System.out.println("use pen to write");
            }
        }

        public class Me {
            public void write(Pen pen){//这里，pen作为Me类方法的参数
                pen.write();
            }
        }
        一般而言，依赖关系在Java中体现为局域变量、方法的形参，或者对静态方法的调用。

    关联:体现的是两个类、或者类与接口之间语义级别的一种强依赖关系。
        public class Pen {
            public void write(){
                System.out.println("use pen to write");
            }
        }
        public class You {
            private Pen pen; // 让pen成为you的类属性

            public You(Pen p){
                this.pen = p;
            }

            public void write(){
                pen.write();
            }
        }
        在Java中，关联关系一般使用成员变量来实现。

    聚合:关联关系的一种特例，他体现的是整体与部分、拥有的关系，即has-a的关系
        public class Family {
            private List<Child> children; //一个家庭里有许多孩子

            // ...
        }
        不同于关联关系的平等地位，聚合关系中两个类的地位是不平等。

    组合:也是关联关系的一种特例，他体现的是一种contains-a的关系，这种关系比聚合更强，也称为强聚合。
        //一个人有鼻子有眼睛
        public class Person {
            //眼睛
            private Eye eye = new Eye();
            //鼻子
            private Nose nose = new Nose();

            // ....
        }
        同样，组合关系中，两个类额关系也是不平等的。

