迪米特法则（最少知道原则）:
    基本介绍
    1.一个对象应该对其他对象保持最少的了解
    2.类与类关系越密切，耦合度越大
    3.迪米特法则又称最少知道原则，即一个类对自己依赖的类知道的越少越好，也就是说，对于被依赖的类不管多么复杂，都应该尽量将逻辑
      封装在类的内部，除了对外提供public方法之外，不对外泄露任何信息
    4.迪米特方法还有个更简单的定义：只与直接朋友通信
    5.直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就直接说这两个对象之间是朋友关系。耦合的方式有很多
      依赖、关联、组合、聚合，其中我们将出现在成员变量，方法参数，方法返回值这几个位置中类称为直接的朋友，而出现在局部变量中的类不是直
      接朋友，也就是说，陌生的类最好不要以局部变量的方式出现在类的内部
    概括：
    只与直接的朋友通信，最少知道原则，避免与非直接朋友的耦合
        对自己依赖的类知道的越少越好，对于被依赖的类不管多复杂，都尽量将逻辑封在内部
迪米特法则核心:降低类之间的耦合，只是减少不必要的耦合，并不是要求完全解除耦合
    直接朋友:出现在返回值、成员变量、方法参数中的类
    间接朋友:出现在方法中作为局部变量的类,如果
    class A{
        public void fun(){}
    }
    class C{
        public void fun(){}
    }
    class B{
        //C就是B的直接朋友:成员变量
        private C c = new C();
        //C就是B的直接朋友:方法参数
        public void test1(C c){
            c.fun();
        }
        //C就是B的直接朋友：返回值
        public C test3(){
            return null;
        }
        public void test4(){
            //A就是B的间接朋友
            A a = new A();
            a.fun();
        }
    }
    //直接朋友：方法参数、返回值、成员变量
    //间接朋友：局部变量