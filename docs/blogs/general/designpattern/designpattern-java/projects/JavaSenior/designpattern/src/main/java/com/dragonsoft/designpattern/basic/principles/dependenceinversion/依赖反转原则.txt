概述:
    1.高层模块不应该依赖底层模块，二者都应该依赖其抽象
    2.抽象不应该依赖细节，细节应该依赖抽象
    3.依赖反转的中心思想是面向结构编程
    4.依赖反转的思想是基于这样的理念:相对于细节的多变性，抽象的东西要稳定的多，以抽象
      为基础的架构比以细节为基础的架构要稳定的多，在java中，抽象的多指接口和抽象类，细
      节就是具体的实现类
    5.使用类或者接口的目的是制定规范，而不涉及任何具体的子类操作，把展现细节的任务交给他们的实现类去做
依赖关系传递的三种方式:
    1.接口传递
    2.构造方法传递
    3.setter方法传递
注意事项:
    1.底层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好
    2.变量的声明类型尽量都是抽象类或者接口，这样我们的变量引用和实际对象之间，就存在一个缓冲层，有
        利于程序的优化和扩展
    3.继承是遵循里氏替换原则